# -*- coding: utf-8 -*-
"""hat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yIirY7Rx6C9FRFos0fIdBwiP2S51fJ9b

# Integrar com o Drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Resgatar repositorio Git

---





"""

# Commented out IPython magic to ensure Python compatibility.
# Clonar o reposit√≥rio
!git clone https://github.com/XPixelGroup/HAT.git
# %cd HAT

"""# Instalar dependencias

"""

!pip install basicsr==1.3.4.9
!pip install -r requirements.txt
!python setup.py develop

"""# Copiar e enviar modelo pre treinado para o arquivo local

Baixar modelo pr√© treinado de sua escolha: [acesse aqui](https://drive.google.com/drive/folders/1HpmReFfoUqUbnAOQ7rvOeNU3uf_m69w0)

Este trecho de c√≥digo cuida de preparar o ambiente para o uso do modelo pr√©-treinado Real_HAT_GAN_sharper.pth:

üîß O que ele faz:

```
!mkdir -p experiments/pretrained_models

Cria a pasta experiments/pretrained_models onde o modelo ser√° armazenado (sem erro se a pasta j√° existir).

!cp /content/drive/MyDrive/Real_HAT_GAN_sharper.pth experiments pretrained_models/

Copia o arquivo de pesos pr√©-treinados do Google Drive para a pasta local esperada pelo script de infer√™ncia.
```

‚úÖ Isso garante que o modelo estar√° no caminho correto (experiments/pretrained_models/Real_HAT_GAN_sharper.pth) para ser carregado automaticamente durante a execu√ß√£o do pipeline.
"""

#Baixar modelo pre treinados
!mkdir -p experiments/pretrained_models
!cp /content/drive/MyDrive/Real_HAT_GAN_sharper.pth experiments/pretrained_models/

"""# Criar arquivo de configura√ß√£o

Este trecho de c√≥digo cria um arquivo de configura√ß√£o YAML necess√°rio para executar o teste de Super-Resolu√ß√£o com o modelo Real_HAT_GAN_sharper.pth no framework HAT.

üîß O que ele faz:
Cria a pasta options/test (caso ainda n√£o exista).

Escreve um arquivo de configura√ß√£o chamado Real_HAT_GAN_sharper.pth.yml com os par√¢metros do modelo e dataset.

Define o caminho das imagens de entrada (dataroot_lq) como /content/drive/MyDrive/inputs_imgs.

Especifica a arquitetura do modelo HAT com seus hiperpar√¢metros.

Aponta para o arquivo de pesos pr√©-treinados do modelo (pretrain_network_g).

Ativa a op√ß√£o para salvar as imagens geradas ap√≥s o processamento (save_img: true).
"""

!mkdir -p options/test
with open("options/test/Real_HAT_GAN_sharper.pth.yml", "w") as f:
    f.write("""
name: Real_HAT_GAN_sharper.pth
model_type: HATModel
scale: 4
num_gpu: 1

datasets:
  test:
    name: demo
    type: SingleImageDataset
    dataroot_lq: /content/drive/MyDrive/inputs_imgs
    io_backend:
      type: disk

network_g:
  type: HAT
  upscale: 4
  in_chans: 3
  img_size: 64
  window_size: 16
  depths: [6, 6, 6, 6, 6, 6]
  embed_dim: 180
  num_heads: [6, 6, 6, 6, 6, 6]
  mlp_ratio: 2
  upsampler: 'pixelshuffle'
  resi_connection: '1conv'

path:
  pretrain_network_g: experiments/pretrained_models/Real_HAT_GAN_sharper.pth
  param_key_g: params_ema
  strict_load_g: true
  resume_state: ~

val:
  save_img: true
  suffix: ~
  flip: false
  x4: true
""")

"""

### üõ†Ô∏è **Corre√ß√£o de Import no `basicsr`**

#### üìå O que o comando faz:

```bash
!sed -i 's/from torchvision.transforms.functional_tensor import rgb_to_grayscale/from torchvision.transforms.functional import rgb_to_grayscale/' /usr/local/lib/python3.11/dist-packages/basicsr/data/degradations.py
```

#### üîß Explica√ß√£o:

Este comando corrige um **erro de importa√ß√£o** no arquivo `degradations.py` da biblioteca `basicsr`.

- Ele substitui:
  ```python
  from torchvision.transforms.functional_tensor import rgb_to_grayscale
  ```
  por:
  ```python
  from torchvision.transforms.functional import rgb_to_grayscale
  ```

#### üß† Por qu√™?

A fun√ß√£o `rgb_to_grayscale` foi movida de `functional_tensor` para `functional` nas vers√µes mais recentes do `torchvision`.  
Sem essa corre√ß√£o, o c√≥digo apresentaria erro ao tentar importar a fun√ß√£o.

‚úÖ **Esse patch garante compatibilidade com a vers√£o atual do `torchvision` instalada no Colab.**
"""

!sed -i 's/from torchvision.transforms.functional_tensor import rgb_to_grayscale/from torchvision.transforms.functional import rgb_to_grayscale/' /usr/local/lib/python3.11/dist-packages/basicsr/data/degradations.py

"""

### üß™ **Execu√ß√£o de Teste com HAT + Limpeza de Resultados Anteriores**

```python
# Apaga qualquer teste anterior
!rm -rf /content/HAT/results/Real_HAT_GAN_sharper*

# Roda o seu test.py normalmente com a configura√ß√£o definida no YAML
!python hat/test.py -opt options/test/Real_HAT_GAN_sharper.pth.yml
```

#### ‚úÖ O que faz:

- **Limpa os resultados anteriores**: remove o diret√≥rio `/content/HAT/results/Real_HAT_GAN_sharper*`, garantindo que apenas os novos resultados da execu√ß√£o atual sejam considerados.
- **Executa o teste com o modelo HAT**: utiliza o arquivo YAML `Real_HAT_GAN_sharper.pth.yml` com as configura√ß√µes do modelo e caminho para as imagens de entrada.
- As imagens de sa√≠da (super-resolvidas) s√£o salvas automaticamente no diret√≥rio:
  ```
  /content/HAT/results/Real_HAT_GAN_sharper/visual
  ```
"""

# apaga qualquer teste anterior
!rm -rf /content/HAT/results/Real_HAT_GAN_sharper*

# roda o seu test.py normalmente
!python hat/test.py -opt options/test/Real_HAT_GAN_sharper.pth.yml

!ls -lh /content/HAT/experiments/pretrained_models/